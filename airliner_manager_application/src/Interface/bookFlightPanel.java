/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Airliner.AirlinerDirectory;
import Business.Airliner.Flight;
import Business.Travel.customerDirectory;
import Business.Users.Customer;
import java.awt.CardLayout;
import java.awt.event.ItemEvent;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import javax.print.attribute.standard.Destination;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author arosk
 */
public class bookFlightPanel extends javax.swing.JPanel {

    private JPanel containerPanel;
    private customerDirectory cusDir;
    List<Flight> data1;
    List<Flight> filterData = new ArrayList<>();
    private String travelDate = "";
    private Date travelDate1 = new Date();
    private Customer cus;
    private String from;

    /**
     * Creates new form bookFlightPanel
     */
    public bookFlightPanel(JPanel containerPanel, customerDirectory cusDir, List<Flight> data1, String from) {
        initComponents();
        this.containerPanel = containerPanel;
        this.cusDir = cusDir;
        this.data1 = data1;
        this.from = from;
        addDataToComBoBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDestination = new javax.swing.JLabel();
        lblFrom = new javax.swing.JLabel();
        comBoSource = new javax.swing.JComboBox<>();
        comBoDestination = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBookFlights = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        lblDestination1 = new javax.swing.JLabel();
        txtFieldMonth = new javax.swing.JTextField();
        txtFieldDate = new javax.swing.JTextField();
        txtFieldYear = new javax.swing.JTextField();
        btnSortPrice = new javax.swing.JButton();
        cmbTime = new javax.swing.JComboBox<>();
        btnProceed = new javax.swing.JButton();

        lblDestination.setText("Destination:");

        lblFrom.setText("From:");

        comBoDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comBoDestinationActionPerformed(evt);
            }
        });

        tblBookFlights.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airliner Name", "Source", "Destination", "Schedule", "Price", "Seats Available"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBookFlights.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBookFlightsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBookFlights);
        if (tblBookFlights.getColumnModel().getColumnCount() > 0) {
            tblBookFlights.getColumnModel().getColumn(3).setResizable(false);
            tblBookFlights.getColumnModel().getColumn(5).setResizable(false);
        }

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblDestination1.setText("Date of Travel(yyyy/mm/dd):");

        btnSortPrice.setText("Sort By Price");
        btnSortPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortPriceActionPerformed(evt);
            }
        });

        cmbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Morning", "Afternoon", "Evening", "Night" }));
        cmbTime.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTimeItemStateChanged(evt);
            }
        });

        btnProceed.setBackground(new java.awt.Color(102, 255, 51));
        btnProceed.setText("Proceed to Booking");
        btnProceed.setEnabled(false);
        btnProceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProceedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 966, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(comBoSource, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(lblDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comBoDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblDestination1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFieldMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbTime, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(btnSortPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(461, 461, 461)
                        .addComponent(btnProceed, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(188, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addComponent(lblFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(1118, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comBoSource, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comBoDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDestination1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSortPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnProceed, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(31, 31, 31)
                    .addComponent(lblFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(557, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comBoDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comBoDestinationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comBoDestinationActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        filterData.clear();
        String source = comBoSource.getSelectedItem().toString();
        String destination = comBoDestination.getSelectedItem().toString();

        //pick dates entered by the customer
        try {
            travelDate = txtFieldMonth.getText() + "-" + txtFieldDate.getText() + "-" + txtFieldYear.getText();
            travelDate1 = new SimpleDateFormat("yyyy-MM-dd").parse(travelDate);
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Please enter correct date in textbox");
        }
        //searching for enteries
        for (Flight flight : data1) {
            if (((flight.getStartLocation().toString()).equals(source)) && ((flight.getEndLocation().toString()).equals(destination))) {
                //compare dates 
                DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
                double test = df1.format(travelDate1).compareTo(df1.format(flight.getStartTime()));
                if (test == 0) {
                    filterData.add(flight);
                }
            }
        }
        if (filterData.size() < 1) {
            JOptionPane.showMessageDialog(null, "No flights found for the current selection!");

        } else {
            populateTable(filterData);
        }
        btnProceed.setEnabled(false);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnSortPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortPriceActionPerformed

        Collections.sort(filterData, new Comparator<Flight>() {
            public int compare(Flight s1, Flight s2) {
                //return s1.getDistanceFromStart() < s2.getDistanceFromStart() ? 1 : 2;
                return Double.compare(s1.getCost(), s2.getCost());
            }
        });
        populateTable(filterData);
        btnProceed.setEnabled(false);
    }//GEN-LAST:event_btnSortPriceActionPerformed

    private void cmbTimeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTimeItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            List<Flight> result = new ArrayList();
            if (this.cmbTime.getSelectedItem().toString().equalsIgnoreCase("All")) {
                result = filterData;
            } else if (this.cmbTime.getSelectedItem().toString().equalsIgnoreCase("Morning")) {
                result = this.filterData.stream().filter(x -> x.getFlightTiming() == Flight.flightTime.MORNING).collect(Collectors.toList());
            } else if (this.cmbTime.getSelectedItem().toString().equalsIgnoreCase("Afternoon")) {
                result = this.filterData.stream().filter(x -> x.getFlightTiming() == Flight.flightTime.AFTERNOON).collect(Collectors.toList());
            } else if (this.cmbTime.getSelectedItem().toString().equalsIgnoreCase("Evening")) {
                result = this.filterData.stream().filter(x -> x.getFlightTiming() == Flight.flightTime.EVENING).collect(Collectors.toList());
            } else if (this.cmbTime.getSelectedItem().toString().equalsIgnoreCase("Night")) {
                result = this.filterData.stream().filter(x -> x.getFlightTiming() == Flight.flightTime.NIGHT).collect(Collectors.toList());
            }
            if (result.size() < 1) {
                JOptionPane.showMessageDialog(null, "No flights found for the current selection!");

            } else {
                populateTable(result);
                btnProceed.setEnabled(false);
            }
        }
    }//GEN-LAST:event_cmbTimeItemStateChanged

    private void tblBookFlightsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBookFlightsMouseClicked
        btnProceed.setEnabled(true);
    }//GEN-LAST:event_tblBookFlightsMouseClicked

    private void btnProceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProceedActionPerformed

        int selectedRow = this.tblBookFlights.getSelectedRow();
        Flight fs = (Flight) this.tblBookFlights.getValueAt(selectedRow, 0);
        TicketBooking tb = new TicketBooking(containerPanel, fs, cusDir, this.from);
        containerPanel.add("TicketBooking", tb);
        CardLayout layout = (CardLayout) containerPanel.getLayout();
        layout.next(containerPanel);

    }//GEN-LAST:event_btnProceedActionPerformed

    private void addDataToComBoBox() {
        List<String> distinctCities = data1.stream().map(x -> x.getStartLocation()).distinct().collect(Collectors.toList());
        distinctCities.addAll(data1.stream().map(x -> x.getEndLocation()).distinct().collect(Collectors.toList()));
        {
            for (String S : distinctCities) {
                this.comBoSource.addItem(S);
                this.comBoDestination.addItem(S);
            }
            comBoDestination.setSelectedIndex(1);
        }
    }

    private void populateTable(List<Flight> filterData1) {
        DefaultTableModel dtm = (DefaultTableModel) tblBookFlights.getModel();
        dtm.setRowCount(0);
        for (Flight flight1 : filterData1) {
            Object[] row = new Object[6];
            row[0] = flight1;
            row[1] = flight1.getStartLocation();
            row[2] = flight1.getEndLocation();
            row[3] = flight1.getStartTime();
            row[4] = flight1.getCost();
            row[5] = flight1.getAirplane().getSeats().stream().filter(x -> x.getIsAvailable() == true).count();
            dtm.addRow(row);
        }

    }

    public void clearSearch() {
        txtFieldDate.setText("");
        txtFieldMonth.setText("");
        txtFieldYear.setText("");
        DefaultTableModel dtm = (DefaultTableModel) tblBookFlights.getModel();
        dtm.setRowCount(0);
        comBoSource.setSelectedIndex(0);
        comBoDestination.setSelectedIndex(1);
    }

//    private void travelDate() {
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProceed;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSortPrice;
    private javax.swing.JComboBox<String> cmbTime;
    private javax.swing.JComboBox<String> comBoDestination;
    private javax.swing.JComboBox<String> comBoSource;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDestination;
    private javax.swing.JLabel lblDestination1;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JTable tblBookFlights;
    private javax.swing.JTextField txtFieldDate;
    private javax.swing.JTextField txtFieldMonth;
    private javax.swing.JTextField txtFieldYear;
    // End of variables declaration//GEN-END:variables
}
